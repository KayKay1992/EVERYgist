backend Project setup and project structure (file and folder)

some packages i installed in backend
1. npm init -y
2. npm i express bcryptjs cors dotenv jsonwebtoken mongoose multer @google/genai
3. npm i nodemon --save-dev

setting up nodemon in package.json file

===============================================================================
BACKEND PROJECT STRUCTURE EXPLANATION
Generated: October 31, 2025
===============================================================================

PROJECT OVERVIEW:
-----------------
This is a Node.js/Express backend for the EVERYgist blogging platform with 
authentication, blog management, comments, and AI integration features.

DIRECTORY STRUCTURE:
--------------------

backend/
├── server.js                    # Main entry point
├── package.json                 # Dependencies and scripts
├── package-lock.json            # Locked dependency versions
├── .env                         # Environment variables (secrets)
├── config/
│   └── db.js                    # Database configuration
├── models/
│   ├── User.js                  # User schema
│   ├── BlogPost.js              # Blog post schema
│   └── Comment.js               # Comment schema
├── controllers/
│   ├── authController.js        # Authentication logic
│   ├── blogPostController.js    # Blog post CRUD operations
│   ├── commentController.js     # Comment management
│   ├── dashboardController.js   # Dashboard analytics
│   └── aiController.js          # AI content generation
├── middleware/
│   ├── authMiddleware.js        # JWT authentication
│   └── uploadMiddleware.js      # File upload handling
├── routes/
│   ├── authRoutes.js            # Auth endpoints
│   ├── blogPostRoutes.js        # Blog post endpoints
│   ├── commentRoutes.js         # Comment endpoints
│   ├── dashboardRoutes.js       # Dashboard endpoints
│   └── aiRoutes.js              # AI generation endpoints
└── utils/
    └── prompt.js                # AI prompt templates


DETAILED FILE EXPLANATIONS:
============================

1. ROOT FILES
-------------

server.js (EMPTY - To be implemented)
Purpose: Main application entry point
Expected Content:
- Express app initialization
- Middleware setup (cors, express.json, etc.)
- Database connection
- Route mounting
- Server startup on specified port
- Error handling

package.json
Purpose: Project metadata and dependencies
Content:
- Scripts:
  * "start": node server.js (production)
  * "dev": nodemon server.js (development with auto-reload)
- Dependencies:
  * express (v5.1.0): Web framework
  * mongoose (v8.19.2): MongoDB ODM
  * bcryptjs (v3.0.2): Password hashing
  * jsonwebtoken (v9.0.2): JWT authentication
  * cors (v2.8.5): Cross-origin resource sharing
  * dotenv (v17.2.3): Environment variable management
  * multer (v2.0.2): File upload handling
  * @google/genai (v1.28.0): Google AI integration
- DevDependencies:
  * nodemon (v3.1.10): Auto-restart server on changes

.env (EMPTY - To be configured)
Purpose: Store sensitive configuration
Expected Variables:
- PORT: Server port (e.g., 5000)
- MONGODB_URI: MongoDB connection string
- JWT_SECRET: Secret key for JWT signing
- GOOGLE_AI_API_KEY: Google Generative AI API key
- NODE_ENV: Environment (development/production)


2. CONFIG FOLDER
----------------

config/db.js (EMPTY - To be implemented)
Purpose: Database connection configuration
Expected Content:
- MongoDB connection function using mongoose
- Connection error handling
- Connection success logging
- Export connectDB function


3. MODELS FOLDER
----------------
Models define the database schemas using Mongoose

models/User.js (EMPTY - To be implemented)
Purpose: User data schema and methods
Expected Schema Fields:
- name: String (required)
- email: String (required, unique)
- password: String (required, hashed)
- role: String (user/admin)
- profileImageUrl: String (optional)
- createdAt: Date
- updatedAt: Date
Methods:
- Pre-save hook to hash passwords
- Compare password method for login

models/BlogPost.js (EMPTY - To be implemented)
Purpose: Blog post data schema
Expected Schema Fields:
- title: String (required)
- content: String (required)
- excerpt: String
- author: ObjectId (ref: User)
- tags: Array of Strings
- coverImage: String (URL)
- status: String (draft/published)
- views: Number
- likes: Number
- createdAt: Date
- updatedAt: Date
Features:
- Populate author details
- Tag indexing for search

models/Comment.js (EMPTY - To be implemented)
Purpose: Comment data schema
Expected Schema Fields:
- content: String (required)
- author: ObjectId (ref: User)
- blogPost: ObjectId (ref: BlogPost)
- parentComment: ObjectId (for nested replies)
- createdAt: Date
- updatedAt: Date
Features:
- Nested comment support
- Populate user and post details


4. CONTROLLERS FOLDER
---------------------
Controllers contain business logic for handling requests

controllers/authController.js (EMPTY - To be implemented)
Purpose: Authentication logic
Expected Functions:
- register: Create new user account
- login: Authenticate user and issue JWT
- getProfile: Get current user profile
- updateProfile: Update user information
- changePassword: Password update

controllers/blogPostController.js (EMPTY - To be implemented)
Purpose: Blog post operations
Expected Functions:
- createPost: Create new blog post
- getAllPosts: Get all posts (with pagination)
- getPostById: Get single post details
- updatePost: Edit existing post
- deletePost: Remove post
- getPostsByTag: Filter posts by tags
- searchPosts: Search posts by keywords
- incrementViews: Track post views

controllers/commentController.js (EMPTY - To be implemented)
Purpose: Comment management
Expected Functions:
- createComment: Add new comment
- getCommentsByPost: Get all comments for a post
- updateComment: Edit comment
- deleteComment: Remove comment
- getCommentReplies: Get nested replies

controllers/dashboardController.js (EMPTY - To be implemented)
Purpose: Admin dashboard analytics
Expected Functions:
- getStats: Overall statistics
- getRecentPosts: Latest blog posts
- getRecentComments: Latest comments
- getUserStats: User engagement metrics
- getPopularPosts: Most viewed/liked posts

controllers/aiController.js (EMPTY - To be implemented)
Purpose: AI content generation
Expected Functions:
- generateContent: AI-powered content creation
- generateSuggestions: Content improvement suggestions
- generateTags: Auto-generate post tags
- generateExcerpt: Auto-create post summary
Uses: @google/genai package for Google AI integration


5. MIDDLEWARE FOLDER
--------------------
Middleware functions for request processing

middleware/authMiddleware.js (EMPTY - To be implemented)
Purpose: Protect routes with JWT authentication
Expected Functions:
- authenticate: Verify JWT token
- authorize: Check user roles/permissions
Features:
- Extract token from Authorization header
- Verify token with JWT_SECRET
- Attach user to request object
- Handle expired/invalid tokens

middleware/uploadMiddleware.js (EMPTY - To be implemented)
Purpose: Handle file uploads
Expected Features:
- Configure multer for image uploads
- Set file size limits
- Validate file types (images only)
- Set upload destination
- Generate unique filenames
- Error handling for invalid files


6. ROUTES FOLDER
----------------
Route definitions mapping URLs to controllers

routes/authRoutes.js (EMPTY - To be implemented)
Purpose: Authentication endpoints
Expected Routes:
- POST /api/auth/register
- POST /api/auth/login
- GET /api/auth/profile (protected)
- PUT /api/auth/profile (protected)
- PUT /api/auth/password (protected)

routes/blogPostRoutes.js (EMPTY - To be implemented)
Purpose: Blog post endpoints
Expected Routes:
- POST /api/posts (protected, admin only)
- GET /api/posts (public)
- GET /api/posts/:id (public)
- PUT /api/posts/:id (protected, admin only)
- DELETE /api/posts/:id (protected, admin only)
- GET /api/posts/tag/:tag (public)
- GET /api/posts/search (public)

routes/commentRoutes.js (EMPTY - To be implemented)
Purpose: Comment endpoints
Expected Routes:
- POST /api/comments (protected)
- GET /api/comments/post/:postId (public)
- PUT /api/comments/:id (protected, owner only)
- DELETE /api/comments/:id (protected, owner/admin)

routes/dashboardRoutes.js (EMPTY - To be implemented)
Purpose: Dashboard endpoints
Expected Routes:
- GET /api/dashboard/stats (protected, admin only)
- GET /api/dashboard/recent-posts (protected, admin only)
- GET /api/dashboard/recent-comments (protected, admin only)
- GET /api/dashboard/popular-posts (protected, admin only)

routes/aiRoutes.js (EMPTY - To be implemented)
Purpose: AI generation endpoints
Expected Routes:
- POST /api/ai/generate-content (protected)
- POST /api/ai/generate-tags (protected)
- POST /api/ai/generate-excerpt (protected)
- POST /api/ai/suggestions (protected)


7. UTILS FOLDER
---------------

utils/prompt.js (EMPTY - To be implemented)
Purpose: AI prompt templates
Expected Content:
- Template functions for AI prompts
- Content generation prompts
- Tag generation prompts
- Excerpt generation prompts
- Customizable prompt parameters


ARCHITECTURE PATTERN:
=====================

This backend follows the MVC (Model-View-Controller) pattern:

1. MODELS: Define data structure (mongoose schemas)
2. CONTROLLERS: Business logic and data processing
3. ROUTES: API endpoints and HTTP methods
4. MIDDLEWARE: Request processing and validation
5. UTILS: Helper functions and utilities

REQUEST FLOW:
-------------
Client Request → Routes → Middleware → Controllers → Models → Database
Database → Models → Controllers → Response → Client


SECURITY FEATURES:
==================
- Password hashing with bcryptjs
- JWT token-based authentication
- Protected routes with middleware
- Role-based access control (user/admin)
- CORS configuration
- Environment variable protection
- File upload validation


DEVELOPMENT WORKFLOW:
=====================

1. Start MongoDB database
2. Configure .env file with credentials
3. Run: npm install (install dependencies)
4. Run: npm run dev (start with nodemon)
5. Test endpoints with Postman/Thunder Client
6. Production: npm start


NEXT STEPS:
===========
All files are currently empty and need implementation. Recommended order:

1. Configure .env file
2. Implement config/db.js
3. Create models (User, BlogPost, Comment)
4. Build middleware (auth, upload)
5. Implement controllers
6. Define routes
7. Set up server.js
8. Test each feature incrementally


DEPENDENCIES SUMMARY:
=====================
- express: Web framework for building REST APIs
- mongoose: MongoDB object modeling
- bcryptjs: Secure password hashing
- jsonwebtoken: JWT token generation/verification
- cors: Enable cross-origin requests
- dotenv: Load environment variables
- multer: Handle multipart/form-data for file uploads
- @google/genai: Google AI integration for content generation
- nodemon: Auto-restart server during development


===============================================================================
STATUS: Project structure created, ready for implementation
===============================================================================