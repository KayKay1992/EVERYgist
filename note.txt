Defining User Mongo Db schema
===============================================================================
User MongoDB Schema Explanation
Generated: October 31, 2025
File: backend/models/User.js
===============================================================================

Overview
- Defines the User document structure in MongoDB using Mongoose.
- Exports the model as `User` (collection will be `users`).

Fields
- name: String, required.
- email: String, required, unique.
- Unique adds a unique index at the DB level to prevent duplicate emails.
- password: String, required.
- profileImageUrl: String, optional, defaults to null.
- bio: String, optional, defaults to empty string.
- role: String, enum ['member', 'admin'], defaults to 'member' (basic RBAC).

Schema Options
- timestamps: true â†’ automatically adds `createdAt` and `updatedAt` to each document.

What This Enables
- Basic account identity (name/email/password) with profile fields (image, bio).
- Role-based access control via the `role` field.
- Reliable auditing via timestamps.

Indexes
- email has a unique index; attempting to create a user with the same email will error with a duplicate key (E11000).

Recommended Hardening (next steps)
- Email normalization: add `lowercase: true, trim: true` and optionally a regex `match` for email format.
- Password security: make `password` `select: false` and add a pre-save hook to hash with bcrypt.
- Instance methods: `comparePassword(candidate)` to verify logins.
- Output hygiene: add `toJSON`/`toObject` transform to omit `password` and `__v` in API responses.
- Validation: add min/max lengths (e.g., name length, bio length) and strong password policy at the controller/service layer.

Example Document (stored)
{
	_id: ObjectId("..."),
	name: "Ada Lovelace",
	email: "ada@example.com",
	password: "<hashed>",
	profileImageUrl: null,
	bio: "",
	role: "member",
	createdAt: "2025-10-31T12:00:00.000Z",
	updatedAt: "2025-10-31T12:00:00.000Z"
}

Notes
- If you add `select: false` on password, remember to explicitly `.select('+password')` when verifying credentials.
- After adding unique index on email in production, ensure a background index build or maintenance window.