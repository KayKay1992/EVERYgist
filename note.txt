Defining BlogPost mongoDb Schema 

===============================================================================
BlogPost MongoDB Schema Explanation
Generated: October 31, 2025
File: backend/models/BlogPost.js
===============================================================================

Overview
- Defines the BlogPost document structure for the blogging platform.
- Exports the model as `BlogPost` (collection will be `blogposts`).

Fields Defined
--------------

1. title: String, required
   - The blog post title/headline.

2. slug: String, required, unique
   - URL-friendly version of the title (e.g., "my-first-post").
   - Unique index prevents duplicate slugs.
   - Used for SEO-friendly URLs like /blog/my-first-post.

3. content: String, required
   - The main body of the blog post.
   - Stores markdown content (to be rendered on frontend).

4. coverImageUrl: String, optional (defaults to null)
   - URL to the blog post's cover/featured image.

5. tags: Array of Strings
   - Categorization tags (e.g., ["React", "JavaScript", "Tutorial"]).
   - Enables filtering posts by technology/topic.

6. author: ObjectId (ref: 'User') - DUPLICATED (BUG!)
   - First declaration: Single author reference
   - Second declaration: Array of authors
   - ⚠️ Issue: The field is defined TWICE! The second definition overrides the first.
   - Current behavior: author is an ARRAY of User references.
   - Should decide: single author OR multiple co-authors?

7. isDraft: Boolean, default: false
   - Indicates if the post is a draft (not published).
   - false = published, true = draft (not visible to public).

8. views: Number, default: 0
   - Tracks how many times the post has been viewed.
   - Can be incremented when users visit the post.

9. likes: Number, default: 0
   - Tracks post popularity/engagement.
   - Can be incremented when users like the post.

10. generatedByAI: Boolean, default: false
    - Flag indicating if the content was AI-generated.
    - Useful for transparency and analytics.

Schema Options
--------------
- timestamps: true
  → Automatically adds `createdAt` and `updatedAt` fields.

What This Schema Enables
-------------------------
- Full blog post lifecycle (draft → published).
- SEO-friendly URLs via slugs.
- Content categorization with tags.
- Author attribution with User references.
- Engagement metrics (views, likes).
- AI content tracking.
- Automatic timestamp auditing.

⚠️ CRITICAL BUG IDENTIFIED
---------------------------
The `author` field is defined TWICE (lines 28-32 and lines 33-38):

```javascript
author: {
  type: mongoose.Schema.Types.ObjectId,
  ref: "User",
  required: true,
},
author: [  // <-- This OVERRIDES the first definition!
  {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
],
```

Current Behavior:
- The second definition wins, making `author` an ARRAY of User IDs.
- This allows multiple co-authors per post.

Recommended Fix:
Choose ONE of these approaches:

Option A - Single Author (most common):
```javascript
author: {
  type: mongoose.Schema.Types.ObjectId,
  ref: "User",
  required: true,
}
```

Option B - Multiple Co-Authors:
```javascript
authors: [  // Rename to "authors" (plural)
  {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  }
]
```

Example Document (as currently stored)
---------------------------------------
```json
{
  "_id": "6723abc123...",
  "title": "Getting Started with React Hooks",
  "slug": "getting-started-with-react-hooks",
  "content": "# Introduction\n\nReact Hooks are...",
  "coverImageUrl": "https://example.com/images/react-hooks.jpg",
  "tags": ["React", "JavaScript", "Hooks"],
  "author": ["6723abc123...", "6723abc456..."],  // Array due to bug!
  "isDraft": false,
  "views": 1250,
  "likes": 42,
  "generatedByAI": false,
  "createdAt": "2025-10-31T10:00:00.000Z",
  "updatedAt": "2025-10-31T12:30:00.000Z"
}
```

Recommended Enhancements
------------------------
1. Fix duplicate author field (see above).
2. Add slug generation helper or pre-save hook.
3. Add text index on title/content for search functionality:
   ```javascript
   blogPostSchema.index({ title: 'text', content: 'text' });
   ```
4. Add validation for slug format (lowercase, hyphens only).
5. Add methods:
   - `incrementViews()` - safely increment view count
   - `incrementLikes()` - safely increment likes
6. Add virtual field for comment count (if comments reference posts).
7. Consider adding:
   - `excerpt` field (short summary for listing pages)
   - `readTime` field (estimated reading time in minutes)
   - `status` enum instead of isDraft: ['draft', 'published', 'archived']

Indexes
-------
- slug: unique index (prevents duplicate URLs)
- Consider adding indexes on:
  - tags (for filtering)
  - author (for author's post list)
  - createdAt (for sorting by date)
  - isDraft + createdAt (compound index for published posts query)

Usage Pattern
-------------
When querying posts:
```javascript
// Get published posts
BlogPost.find({ isDraft: false })
  .populate('author', 'name email profileImageUrl')
  .sort({ createdAt: -1 });

// Get posts by tag
BlogPost.find({ tags: 'React', isDraft: false });

// Get single post by slug
BlogPost.findOne({ slug: 'my-post-slug' })
  .populate('author');
```

===============================================================================
STATUS: Schema defined but has CRITICAL BUG (duplicate author field)
PRIORITY: Fix author field duplication before production use
=============================================================================== 